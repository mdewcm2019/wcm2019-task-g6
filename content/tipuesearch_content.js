var tipuesearch = {"pages": [{'title': 'G6成員名單', 'text': '組長： \n 40623155\xa0 陳霖 \n 組員： \n 40623153\xa0 廖祥祐 \n 40623156\xa0 林聖翰 \n 40623157\xa0 李昀霖 \n \n 分組部落格： \n https://cd2019a-task1-2019cda-t1-g6.blogspot.com/ \n 分組倉儲： \n https://github.com/mdewcm2019/wcm2019-task-g6 \n 分組網站： \n https://mdewcm2019.github.io/wcm2019-task-g6/content/index.html \n', 'tags': '', 'url': 'G6成員名單.html'}, {'title': '實習任務', 'text': '', 'tags': '', 'url': '實習任務.html'}, {'title': '測試1', 'text': 'Try it \n \n \n \n', 'tags': '', 'url': '測試1.html'}, {'title': '測試2', 'text': "\n \n \n  Your browser doesn't support the HTML5 element canvas.      Throw dice  \n \n Stage:   Point:   Outcome: \n \n", 'tags': '', 'url': '測試2.html'}, {'title': 'canvas1', 'text': "\n  Your browser doesn't support the HTML5 element canvas.  \n \n 繪圖   清除 \n", 'tags': '', 'url': 'canvas1.html'}, {'title': 'Brython', 'text': '\n  導入 Brython 標準程式庫  \n \n \n \n  啟動 Brython  \n \n \n  以下製作 button \n \n   Set Number of Gears \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Ball', 'text': '\n \n \n \n \n \n \n stop \n \n test 1 \n test 2 \n \n \n \n', 'tags': '', 'url': 'Ball.html'}, {'title': '網路連線設定', 'text': '了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. 正常情況下, 電腦輔助設計室中的 64 台電腦透過 IPv4 協定下的 DHCP 與 NAT 上網, 各電腦以 DHCP client 取得 192.168.1.* 的網路位址, 然後以 NAT 的一組外部 IP 上網, 通常必須設定 Proxy Server 為 http://proxy.kmol.info:3128 後上網會比較順暢, 但若 8 台 Proxy Servers 無法正常運作時, 則取消 Proxy Server 的設定. 瀏覽器代理主機設定 了解如何設定 Google Chrome 與 Firefox 瀏覽器的代理主機設定. 申請 Github 帳號 利用 Gmail 帳號申請 Github 帳號, 申請後利用電子郵箱收信進行確認後, 就可以在 Github 上建立倉儲。 \n', 'tags': '', 'url': '網路連線設定.html'}, {'title': '網際網路故障排除', 'text': '\n 遇到學校伺服器IP掛掉問題 Step1.關閉網路第四版協定 \n \n 打開IPV6 \n 修改內容設定，打開DNS並輸入 \n 2001:b000:168::1 \n \n 修改proxy內容 \n [2001:288:6004:17::4] \n \n 完成修改後便能成功上網。 \n', 'tags': '', 'url': '網際網路故障排除.html'}, {'title': 'ssh.key操作步驟', 'text': '關閉彈出的登入窗 \n 開啟start.bat後輸入\xa0 git config --edit --system \n 開啟編輯器，編輯git的設定 \n 使用按鍵H/J/K/L控制方向，之後按a進入編輯模式 \n 就可以按Backspace刪除最後一行 \n 如下 \n \n 刪除後按Esc鍵離開編輯模式 \n 輸入2個冒號後，再輸入wq存檔並關閉即可 \n 直接離開則輸入exit即可退出 \n 在可攜系統的程式視窗輸入sh (可至y:\\git\\bin中確認) \n 執行 git 的 shell並輸入(ssh-keygen -t rsa -b 4096 -C "This is my key") \n 將會建立Private 與 Public金鑰至y:\\home\\.ssh\\id_rsa與id_rsa.pub將 id_rsa.pub 的內容複製貼上至Github 帳號的Settings \n 如下 \n \n 在SSH and GPG keys的SSH Key點擊new ssh key並貼上所複製的的內容 \n \n 利用ssh提交推送 \n 首先要確認倉儲是以ssh的方式clone \n 利用以下指令clone \n git clone\xa0git@github.com:(mdekmol/github分組網址) \n 或直接使用SciTE編輯器開啟個人倉儲的.git檔案裡面的config檔案 \n 把url = https://github.com/ ( mdekmol/github分組網址) \n 改成url = git@github.com: ( mdekmol/github分組網址) \n 完成後直接提交推送即可不用打帳號密碼就能push。 \n', 'tags': '', 'url': 'ssh.key操作步驟.html'}, {'title': '網際內容管理內容', 'text': '', 'tags': '', 'url': '網際內容管理內容.html'}, {'title': '配置可攜程式環境', 'text': '取得 Windows 10 64 位元環境下的可攜程式環境 (下載\xa0 2019_cdb_w5.7z), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. 以滑鼠點擊 start.bat 開啟可攜隨身系統, 以 stop.bat 關閉可攜隨身系統, 隨身碟必須在關閉所有應用程式執行下, 才可正常退出. 了解基本的 DOS (Disk Operating System) 指令 C:\\> 符號為 DOS 命令列視窗的回應 (Prompt), 表示目前在 C 槽硬碟的 \\ 根目錄, 若要切換到 Y 槽, 則在電腦的回應後, 輸入 Y:, 命令列將轉為 Y:\\> 若要更換目錄, 則使用 cd, 也就是 change directory 的意思, 例如: Y:\\>cd tmp 表示要從 Y 槽的根目錄更換到 tmp 目錄, 也就是 Y:\\tmp> 若要再回到 Y 槽的根目錄, 可以使用 cd .. 表示要從目前所在目錄, 往上跳回一個目錄, 也就是重新回到 Y 槽的根目錄. 另外, 無論目前位於哪一個子目錄, 也可以使用 cd \\ 直接回到根目錄. 或者從 Y:\\> 直接使用 cd \\tmp\\repo\\ssh\\wcm2019 直接從 Y 槽的根目錄, 跳進 Y:\\tmp\\repo\\ssh\\wcm2019> 此外, 常用的 DOS 指令有: dir - 列出目前所在目錄的內容 mkdir - 隨後加上要建立目錄的名稱, 可以建立目錄 cls - clear screen, 清除目前的命令列顯示的內容 \n', 'tags': '', 'url': '配置可攜程式環境.html'}, {'title': '倉儲改版', 'text': '建立 Git 倉儲, 並 clone 倉儲至近端工作後, 對遠端倉儲改版 可攜程式系統中已經內建 git, 可以在啟動 start.bat 後, 透過 path 的設定, 直接執行 git 指令. 建立 Git 倉儲, 共分為兩類, 一類是直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版. 另一類則是故意在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端. git add git add 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容. git add 在 GIT 架構下, 是對所新增或修改的內容拍快照: git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns in the .gitignore file will be ignored by git add git commit \xa0 git commit 執行之前, 必須使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間. 當使用者採用 git commit -m "改版說明訊息", 此次提交到 .git 目錄下的更動內容, 均會綁定使用者身分與改版所輸入的說明訊息. git push git push 在隨後沒有輸入遠端 URL 代號時, 表示要推送到 origin, 若透過 git remote add 設定其他代號與 URL 對應時, git push 加上代號, 就可以將此次的提交內容, 推送到指定的 URL 所在遠端倉儲. \n', 'tags': '', 'url': '倉儲改版.html'}, {'title': '靜態CMSimfly', 'text': '利用 CMSimfly (https://github.com/chiamingyen/cmsimfly) 內容, 建立自己的 Github Pages 網站 設法利用 \xa0 HTML5 CSS 與 Javascript , 納入與機械設計相關的靜態網頁 \n', 'tags': '', 'url': '靜態CMSimfly.html'}, {'title': 'Python程式碼匯入步驟', 'text': 'Python程式碼匯入操作影片 \n \n', 'tags': '', 'url': 'Python程式碼匯入步驟.html'}, {'title': 'Mobile 網站內容', 'text': '參考倉儲: \xa0 https://github.com/mdecourse/acmsimfly \n 參考網站: \xa0 http://mde.tw/acmsimfly \n 學習如何使用 CMSimfly, 在網站中加入各種內容 (導入 Bootstrap frontend framework) 使用 Flask, bs4 與 lxml 模組 了解 CMSimfly 如何建構, 並且嘗試修改現有功能, 除錯或建立自己的網際內容管理系統 \n', 'tags': '', 'url': 'Mobile 網站內容.html'}, {'title': 'Virtual Host', 'text': '參考 vdi: 位於雲端的 \xa0 Ubuntu 18.04_201904.vdi \xa0 (約 9 GB) - 已經配置 Fossil SCM: https 5443, Host-only: 192.168.56.2, https: 443 and 8843 for CMSimfly, Squid Proxy Server. 假如要利用 USB 隨身碟存放上述約 9 GB 的 Ubuntu 18.04 vdi 檔案, 必須將隨身碟格式化為 NTFS, 若採 Fat32 格式, 最大單一檔案必須小於 4 GB. 另外在近端有一類似的檔案, 可提供上課學員下載: http://wcmg1.kmol.info:88/ub1804_nox.vdi \xa0 (僅限近端用戶使用 IPv6 協定者下載) \n Fossil SCM 如何利用 Fossil SCM, 在 Virtualbox 中的 Ubuntu 18.04-2 (8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁 Ubuntu 18.04 (https://www.ubuntu.com/about/release-cycle), 配置網路連線, 然後架構 uwsgi 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 nginx 伺服無版次管理的 CMSimfly 靜態網頁. \n', 'tags': '', 'url': 'Virtual Host.html'}, {'title': '期中報告', 'text': '', 'tags': '', 'url': '期中報告.html'}, {'title': '簡介', 'text': 'CMSimfly ( https://github.com/chiamingyen/cmsimfly)  是一套簡單的網際內容管理系統, 採用 Flask 網際框架, 以 Beautifulsoup 解讀分頁內容. \n \n', 'tags': '', 'url': '簡介.html'}, {'title': 'Blogger', 'text': '團隊部落格>  Here！ \n', 'tags': '', 'url': 'Blogger.html'}, {'title': 'Team Member', 'text': '40623153\xa0 廖祥佑 \n 40623155\xa0 陳霖 \n 40623156\xa0 林聖翰 \n 40623157\xa0 李昀霖 \n', 'tags': '', 'url': 'Team Member.html'}, {'title': '目錄結構', 'text': 'CMSimfly 的動態系統採用 Python3 + Flask 建構, 並且利用 Beatifulsoup 解讀位於 contig 目錄中的 content.htm 超文件檔案. \n content.htm 檔案可以透過動態系統中的 generate_pages 功能, 將超文件轉為位於 content 目錄中的個別頁面檔案. \n 動態系統與靜態系統則共用 downloads, images, static 等目錄, 其中 downloads 目錄存放在動態系統上傳的文件檔, 而 images 目錄則存放動態系統所上傳的影像檔案, 包括 jpg, png 與 gif 等格式圖檔. \n static 目錄則存放在動態與靜態系統所需要的 Javascript 或 Brython 程式檔. \n', 'tags': '', 'url': '目錄結構.html'}, {'title': '頁面編輯', 'text': 'CMSimfly 動態系統的網際編輯器採用  TinyMCE4 , 可以放入一般超文件,\xa0 納入圖檔, 嵌入影片連結, 並且加入帶有行數的原始碼. \n 透過 File Upload 功能, 可以一次上傳多個檔案,\xa0 存入 downloads 目錄中儲存, 之後各頁面可以引入對應連結. \n 而圖檔的上傳與引用與一般檔案類似, 但上傳後存入 images 目錄中. \n', 'tags': '', 'url': '頁面編輯.html'}, {'title': '插入程式碼', 'text': 'CMSimfly 目前使用 Syntaxhighlighter 3.0.83: \n \xa0 http://alexgorbatchev.com/SyntaxHighlighter/ \xa0 \n 進行頁面中的程式碼高亮顯示. \n Java 程式碼 \n import java.util.Scanner;\n\npublic class Life {\n    public static void show(boolean[][] grid){\n        String s = "";\n        for(boolean[] row : grid){\n            for(boolean val : row)\n                if(val)\n                    s += "*";\n                else\n                    s += ".";\n            s += "\\n";\n        }\n        System.out.println(s);\n    }\n    \n    public static boolean[][] gen(){\n        boolean[][] grid = new boolean[10][10];\n        for(int r = 0; r < 10; r++)\n            for(int c = 0; c < 10; c++)\n                if( Math.random() > 0.7 )\n                    grid[r][c] = true;\n        return grid;\n    }\n    \n    public static void main(String[] args){\n        boolean[][] world = gen();\n        show(world);\n        System.out.println();\n        world = nextGen(world);\n        show(world);\n        Scanner s = new Scanner(System.in);\n        while(s.nextLine().length() == 0){\n            System.out.println();\n            world = nextGen(world);\n            show(world);\n            \n        }\n    }\n    \n    public static boolean[][] nextGen(boolean[][] world){\n        boolean[][] newWorld \n            = new boolean[world.length][world[0].length];\n        int num;\n        for(int r = 0; r < world.length; r++){\n            for(int c = 0; c < world[0].length; c++){\n                num = numNeighbors(world, r, c);\n                if( occupiedNext(num, world[r][c]) )\n                    newWorld[r][c] = true;\n            }\n        }\n        return newWorld;\n    }\n    \n    public static boolean occupiedNext(int numNeighbors, boolean occupied){\n        if( occupied && (numNeighbors == 2 || numNeighbors == 3))\n            return true;\n        else if (!occupied && numNeighbors == 3)\n            return true;\n        else\n            return false;\n    }\n\n    private static int numNeighbors(boolean[][] world, int row, int col) {\n        int num = world[row][col] ? -1 : 0;\n        for(int r = row - 1; r <= row + 1; r++)\n            for(int c = col - 1; c <= col + 1; c++)\n                if( inbounds(world, r, c) && world[r][c] )\n                    num++;\n\n        return num;\n    }\n\n    private static boolean inbounds(boolean[][] world, int r, int c) {\n        return r >= 0 && r < world.length && c >= 0 &&\n        c < world[0].length;\n    }\n\n} \n \n Python 程式碼 \n def parse_content():\n    """use bs4 and re module functions to parse content.htm"""\n    #from pybean import Store, SQLiteWriter\n    # if no content.db, create database file with cms table\n    \'\'\'\n    if not os.path.isfile(config_dir+"content.db"):\n        library = Store(SQLiteWriter(config_dir+"content.db", frozen=False))\n        cms = library.new("cms")\n        cms.follow = 0\n        cms.title = "head 1"\n        cms.content = "content 1"\n        cms.memo = "first memo"\n        library.save(cms)\n        library.commit()\n    \'\'\'\n    # if no content.htm, generate a head 1 and content 1 file\n    if not os.path.isfile(config_dir+"content.htm"):\n        # create content.htm if there is no content.htm\n        File = open(config_dir + "content.htm", "w", encoding="utf-8")\n        File.write("<h1>head 1</h1>content 1")\n        File.close()\n    subject = file_get_contents(config_dir+"content.htm")\n    # deal with content without content\n    if subject == "":\n        # create content.htm if there is no content.htm\n        File = open(config_dir + "content.htm", "w", encoding="utf-8")\n        File.write("<h1>head 1</h1>content 1")\n        File.close()\n        subject = "<h1>head 1</h1>content 1"\n    # initialize the return lists\n    head_list = []\n    level_list = []\n    page_list = []\n    # make the soup out of the html content\n    soup = bs4.BeautifulSoup(subject, \'html.parser\')\n    # 嘗試解讀各種情況下的標題\n    soup = _remove_h123_attrs(soup)\n    # 改寫 content.htm 後重新取 subject\n    with open(config_dir + "content.htm", "wb") as f:\n        f.write(soup.encode("utf-8"))\n    subject = file_get_contents(config_dir+"content.htm")\n    # get all h1, h2, h3 tags into list\n    htag= soup.find_all([\'h1\', \'h2\', \'h3\'])\n    n = len(htag)\n    # get the page content to split subject using each h tag\n    temp_data = subject.split(str(htag[0]))\n    if len(temp_data) > 2:\n        subject = str(htag[0]).join(temp_data[1:])\n    else:\n        subject = temp_data[1]\n    if n >1:\n            # i from 1 to i-1\n            for i in range(1, len(htag)):\n                head_list.append(htag[i-1].text.strip())\n                # use name attribute of h* tag to get h1, h2 or h3\n                # the number of h1, h2 or h3 is the level of page menu\n                level_list.append(htag[i-1].name[1])\n                temp_data = subject.split(str(htag[i]))\n                if len(temp_data) > 2:\n                    subject = str(htag[i]).join(temp_data[1:])\n                else:\n                    subject = temp_data[1]\n                # cut the other page content out of htag from 1 to i-1\n                cut = temp_data[0]\n                # add the page content\n                page_list.append(cut)\n    # last i\n    # add the last page title\n    head_list.append(htag[n-1].text.strip())\n    # add the last level\n    level_list.append(htag[n-1].name[1])\n    temp_data = subject.split(str(htag[n-1]))\n    # the last subject\n    subject = temp_data[0]\n    # cut the last page content out\n    cut = temp_data[0]\n    # the last page content\n    page_list.append(cut)\n    return head_list, level_list, page_list\n\n \n \n C或C++程式碼 \n 請注意, 目前 CMSimfly 標題內文無法解讀 "/" 符號, 因此若本頁面的標題為\xa0 "C/C++程式碼", 則無法進行分頁. \n /* Runge Kutta for a set of first order differential equations */\n \n#include <stdio.h>\n#include <math.h>\n \n#define N 2 /* number of first order equations */\n#define dist 0.1 /* stepsize in t*/\n#define MAX 30.0 /* max for t */\n \nFILE *output; /* internal filename */\nFILE *output1; /* internal filename */\n// 利用 pipe 呼叫 gnuplot 繪圖\nFILE *pipe;\n \nvoid runge4(double x, double y[], double step); /* Runge-Kutta function */\ndouble f(double x, double y[], int i); /* function for derivatives */\n \nvoid main(){\n \n  double t, y[N];\n  int j;\n \n  output=fopen("osc.dat", "w"); /* external filename */\n  output1=fopen("osc1.dat", "w"); /* external filename */\n \n  y[0]=1.0; /* initial position */\n  y[1]=0.0; /* initial velocity */\n \n  //fprintf(output, "0\\t%f\\n", y[0]);\n \n  for (j=1; j*dist<=MAX ;j++) /* time loop */{\n \n    t=j*dist;\n    runge4(t, y, dist);\n    fprintf(output, "%f\\t%f\\n", t, y[0]);\n    fprintf(output1, "%f\\t%f\\n", t, y[1]);\n  }\n \n  fclose(output);\n  fclose(output1);\n \n  pipe = popen("gnuplot -persist","w");\n  //fprintf(pipe,"set term png enhanced font \\"v:/fireflysung.ttf\\" 18 \\n");\n  fprintf(pipe,"set term png enhanced font \\"y:/wqy-microhei.ttc\\" 18 \\n");\n  //fprintf(pipe,"set yrange [68:70]\\n");\n  fprintf(pipe,"set output \\"test.png\\"\\n");\n  fprintf(pipe, "plot \\"osc.dat\\" title \\"位移\\" with lines, \\"osc1.dat\\" title \\"速度\\" with lines\\n");\n  fprintf(pipe,"quit\\n");\n\n  fprintf(pipe,"quit\\n");\n  pclose(pipe);\n}\n \nvoid runge4(double x, double y[], double step){\n \n  double h=step/2.0, /* the midpoint */\n  t1[N], t2[N], t3[N], /* temporary storage arrays */\n  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */\n  int i;\n \n  for (i=0;i<N;i++){\n \n    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));\n  }\n \n  for (i=0;i<N;i++){\n \n    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));\n  }\n \n  for (i=0;i<N;i++){\n \n    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));\n  }\n \n  for (i=0;i<N;i++){\n \n    k4[i]= step*f(x+step, t3, i);\n  }\n \n  for (i=0;i<N;i++){\n \n    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;\n  }\n}\n \ndouble f(double x, double y[], int i){\n \n  if (i==0)\n    x=y[1]; /* derivative of first equation */\n  if (i==1)\n    x=-y[0]-0.5*y[1];\n  return x;\n} \n \n Lua 程式碼 \n -- 導入 js 模組\njs = require("js")\n-- 取得 window\nwindow = js.global\n-- 猜小於或等於 n 的整數\nbig = 100\n-- 計算猜測次數, 配合 while 至少會猜一次\nnum = 1\n-- 利用 window:prompt 方法回應取得使用者所猜的整數\nguess = window:prompt("請猜一個介於 1 到 "..big.." 的整數")\n-- 利用數學模組的 random 函數以亂數產生答案\nanswer = math.random(big)\noutput = ""\n-- 若沒猜對, 一直猜到對為止\nwhile answer ~= tonumber(guess) do\n    if answer > tonumber(guess) then\n        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too small"\n        print(output)\n    else\n        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too big"\n        print(output)\n    end \n    guess = window:prompt(output..", 請猜一個介於 1 到 "..big.." 的整數")\n    num = num + 1\nend\nprint("總共猜了 "..num.." 次, answer=guess="..answer.." - correct")\n     \n \n Javascript 程式碼 \n STLViewer = function(stlpath, plotarea) {\n\n\tvar mycanvas = document.getElementById(plotarea);\n\tvar viewer = new JSC3D.Viewer(mycanvas)\n\tvar theScene = new JSC3D.Scene;\n\t////Initialize with a default file:\n\t//var stlpath = "../../../assets/2013-10-23/stl/box.STL"\n\t//var stlpath = "../../../assets/2013-10-23/stl/taj.stl"\n\tviewer.setParameter(\'SceneUrl\', stlpath);\n    viewer.setParameter(\'InitRotationX\', 20);\n\tviewer.setParameter(\'InitRotationY\', 20);\n\tviewer.setParameter(\'InitRotationZ\', 0);\n\tviewer.setParameter(\'ModelColor\', \'#CAA618\');\n\tviewer.setParameter(\'BackgroundColor1\', \'#FFFFFF\');\n\tviewer.setParameter(\'BackgroundColor2\', \'#383840\');\n\tviewer.init();\n\tviewer.update();\n\t////init done\n\tvar canvas_drop = document.getElementById(\'canvas-drop\')\n\t/*var dropzone = document.getElementById(\'dropzone\')\n\tdropzone.addEventListener(\'dragover\', handleDragOver, false);\n\tdropzone.addEventListener(\'drop\', handleFileSelect, false); */\n\tcanvas_drop.addEventListener(\'dragover\', handleDragOver, false);\n\tcanvas_drop.addEventListener(\'drop\', handleFileSelect, false);\n\n////Drag and drop logic:\n\tfunction handleFileSelect(evt) {\n\t    evt.stopPropagation();\n\t    evt.preventDefault();\n\t    var files = evt.dataTransfer.files;\n\t    console.log(evt)\n\t    console.log(files)\n\t    preview_stl(files[0])\n\t  }\n\n\t  function handleDragOver(evt) {\n\t    evt.stopPropagation();\n\t    evt.preventDefault();\n\t    evt.dataTransfer.dropEffect = \'copy\';\n\t  }\n\n////jsc3d logic\n\tvar handle_file_select = function(e) {\n\t\te.stopPropagation()\n\t\te.preventDefault()\n\t\tvar f = e.target.files[0]\n\t\tpreview_stl(f)\n\t}\n\n\tfunction preview_stl(f) {\n\t\tvar reader = new FileReader()\n\t\tvar ext = f.name.split(".")[1]\n\n\t\tfunction setup_viewer() {\n\t\t\tviewer.setParameter(\'InitRotationX\', 20);\n\t\t\tviewer.setParameter(\'InitRotationY\', 20);\n\t\t\tviewer.setParameter(\'InitRotationZ\', 0);\n\t\t\tviewer.setParameter(\'ModelColor\', \'#CAA618\');\n\t\t\tviewer.setParameter(\'BackgroundColor1\', \'#FFFFFF\');\n\t\t\tviewer.setParameter(\'BackgroundColor2\', \'#383840\');\n\t\t\tviewer.setParameter(\'RenderMode\', "flat");\n\t\t}\n\t\tsetup_viewer()\n\n\t\treader.onload = (function(file) {\n\t\t\treturn function(e) {\n\t\t\t\ttheScene = new JSC3D.Scene\n\t\t    \tstl_loader = new JSC3D.StlLoader()\n\t\t    \tstl_loader.parseStl(theScene, e.target.result)\n\t\t      \t//viewer.init()\n\t\t      \tviewer.replaceScene(theScene)\n\t\t      \tviewer.update()\n\t\t      \tconsole.log("file reader onload")\n\t\t\t}\n\t\t})(f)\n\n\t\tif (ext.toLowerCase() != "stl") {\n\t\t\talert("That doesn\'t appear to be an STL file.");\n\t\t} else {\n\t\t\treader.readAsBinaryString(f)\n\t\t}\n\t}\n}\n \n \n Html 原始碼 \n <html>\n   <head>\n      <meta http-equiv="content-type" content="text/html;charset=utf-8">\n      <title>CMSimfly</title>\n      <link rel="stylesheet" type="text/css" href="/static/cmsimply.css">\n   </head>\n   <body>\n      <div class=\'container\'>\n      <nav>\n         <ul id=\'css3menu1\' class=\'topmenu\'>\n            <li><a href=\'/get_page/簡介\'>簡介</a>\n            <li><a href=\'/get_page/目錄結構\'>目錄結構</a>\n            <li>\n               <a href=\'/get_page/頁面編輯\'>頁面編輯</a>\n               <ul>\n                  <li>\n                     <a href=\'/get_page/插入程式碼\'>插入程式碼</a>\n                     <ul>\n                        <li><a href=\'/get_page/Java 程式碼\'>Java 程式碼</a>\n                        <li><a href=\'/get_page/Python 程式碼\'>Python 程式碼</a>\n                        <li><a href=\'/get_page/C或C++程式碼\'>C或C++程式碼</a>\n                        <li><a href=\'/get_page/Lua 程式碼\'>Lua 程式碼</a>\n                        <li><a href=\'/get_page/Javascript 程式碼\'>Javascript 程式碼</a>\n                        <li><a href=\'/get_page/Html 原始碼\'>Html 原始碼</a></li>\n                        </li>\n                     </ul>\n               </ul>\n            <li><a href=\'/get_page/網際簡報\'>網際簡報</a>\n            <li><a href=\'/get_page/網誌編輯\'>網誌編輯</a>\n            <li><a href=\'/get_page/已知錯誤\'>已知錯誤</a></li>\n         </ul>\n      </nav>\n      <section>\n         <form method=\'post\' action=\'/ssavePage\'>\n         <textarea class=\'simply-editor\' name=\'page_content\' cols=\'50\' rows=\'15\'><h3>Html 原始碼</h3></textarea>\n         <input type=\'hidden\' name=\'page_order\' value=\'9\'>\n         <input type=\'submit\' value=\'save\'>\n         <input type=button onClick="location.href=\'/get_page/Html 原始碼\'" value=\'viewpage\'>\n         </form>\n      </section>\n   </body>\n</html>\nCOPY TO CLIPBOARD\t \n 正齒輪繪圖程式碼 \n <!-- 導入 Brython 標準程式庫 -->\n<script src="./../static/brython.js"></script>\n<script src="./../static/brython_stdlib.js"></script>\n<p></p>\n<!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\n// 設定 data/py 為共用程式路徑\nbrython({debug:1, pythonpath:[\'./../data/py\']});\n}\n</script>\n<p><canvas height="600" id="onegear" width="800"></canvas></p>\n<!-- 以下製作 button-->\n<div height="20" id="onegear_div" width="800"></div>\n<p><input id="n" type="text" value="22"><br> <button id="button">Set Number of Gears</button></p>\n<!-- 以下實際利用  Brython 繪圖-->\n<script type="text/python3">\nfrom browser import document as doc\nimport math\n# deg 為角度轉為徑度的轉換因子\ndeg = math.pi/180.\n# 定義 Spur 類別\nclass Spur(object):\n    def __init__(self, ctx):\n        self.ctx = ctx\n  \n    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):\n        self.ctx.beginPath()\n        self.ctx.lineWidth = width\n        self.ctx.moveTo(x1, y1)\n        self.ctx.lineTo(x2, y2)\n        self.ctx.strokeStyle = fill\n        self.ctx.stroke()\n  \n    # 定義一個繪正齒輪的繪圖函式\n    # midx 為齒輪圓心 x 座標\n    # midy 為齒輪圓心 y 座標\n    # rp 為節圓半徑, n 為齒數\n    # pa 為壓力角 (deg)\n    # rot 為旋轉角 (deg)\n    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷\n    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):\n        # 齒輪漸開線分成 15 線段繪製\n        imax = 15\n        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線\n        self.create_line(midx, midy, midx, midy-rp)\n        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數\n        # 模數也就是齒冠大小\n        a=2*rp/n\n        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍\n        d=2.5*rp/n\n        # ra 為齒輪的外圍半徑\n        ra=rp+a\n        # rb 則為齒輪的基圓半徑\n        # 基圓為漸開線長齒之基準圓\n        rb=rp*math.cos(pa*deg)\n        # rd 為齒根圓半徑\n        rd=rp-d\n        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd\n        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小\n        # 將圓弧分成 imax 段來繪製漸開線\n        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd\n        if rd>rb:\n            dr = (ra-rd)/imax\n        else:\n            dr=(ra-rb)/imax\n        # tan(pa*deg)-pa*deg 為漸開線函數\n        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg\n        for j in range(n):\n            ang=-2.*j*math.pi/n+sigma\n            ang2=2.*j*math.pi/n+sigma\n            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)\n            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)\n            for i in range(imax+1):\n                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd\n                if rd>rb:\n                    r=rd+i*dr\n                else:\n                    r=rb+i*dr\n                theta=math.sqrt((r*r)/(rb*rb)-1.)\n                alpha=theta-math.atan(theta)\n                xpt=r*math.sin(alpha-ang)\n                ypt=r*math.cos(alpha-ang)\n                xd=rd*math.sin(-ang)\n                yd=rd*math.cos(-ang)\n                # i=0 時, 繪線起點由齒根圓上的點, 作為起點\n                if(i==0):\n                    last_x = midx+xd\n                    last_y = midy-yd\n                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點\n                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)\n                # 最後一點, 則為齒頂圓\n                if(i==imax):\n                    lfx=midx+xpt\n                    lfy=midy-ypt\n                last_x = midx+xpt\n                last_y = midy-ypt\n            # the line from last end of dedendum point to the recent\n            # end of dedendum point\n            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標\n            # 下列為齒根圓上用來近似圓弧的直線\n            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)\n            for i in range(imax+1):\n                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd\n                if rd>rb:\n                    r=rd+i*dr\n                else:\n                    r=rb+i*dr\n                theta=math.sqrt((r*r)/(rb*rb)-1.)\n                alpha=theta-math.atan(theta)\n                xpt=r*math.sin(ang2-alpha)\n                ypt=r*math.cos(ang2-alpha)\n                xd=rd*math.sin(ang2)\n                yd=rd*math.cos(ang2)\n                # i=0 時, 繪線起點由齒根圓上的點, 作為起點\n                if(i==0):\n                    last_x = midx+xd\n                    last_y = midy-yd\n                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點\n                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)\n                # 最後一點, 則為齒頂圓\n                if(i==imax):\n                    rfx=midx+xpt\n                    rfy=midy-ypt\n                last_x = midx+xpt\n                last_y = midy-ypt\n            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標\n            # 下列為齒頂圓上用來近似圓弧的直線\n            self.create_line(lfx,lfy,rfx,rfy,fill=color)\ncanvas = doc[\'onegear\']\nctx = canvas.getContext("2d")\n  \n# 以 button 驅動的事件函式\ndef setgearnumber(e):\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    x = (canvas.width)/2\n    y = (canvas.height)/2\n    if doc["n"].value.isdigit():\n        n1 = int(doc["n"].value)\n    else:\n        n1= 25\n    # 設定齒輪參數\n    x = (canvas.width)/2\n    y = (canvas.height)/2\n    r = 0.6*(canvas.height/2)\n    pa = 20\n    # 繪出齒輪\n    Spur(ctx).Gear(x, y, r, n1, pa, "blue")\n#判定 button\nsetgearnumber(True)\ndoc[\'button\'].bind(\'click\',setgearnumber)\n</script>\n\n \n 國旗繪圖程式碼 \n <!-- for Brython -->\n<script src="./../static/brython.js"></script>\n<script src="./../static/brython_stdlib.js"></script>\n<!-- 啟動 brython() -->\n<p>\n<script>\nwindow.onload=function(){\nbrython(1);\n}\n</script>\n</p>\n<!-- 以下利用 Brython 程式執行繪圖 -->\n<p><canvas height="400" id="taiwan_flag" width="600"></canvas></p>\n<p>\n<script type="text/python3">\n# 導入 doc\nfrom browser import document as doc\nimport math\n  \n# 準備繪圖畫布\ncanvas = doc["taiwan_flag"]\nctx = canvas.getContext("2d")\n# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點\n# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)\n# 以下採用 canvas 原始座標繪圖\nflag_w = canvas.width\nflag_h = canvas.height\ncircle_x = flag_w/4\ncircle_y = flag_h/4\n# 先畫滿地紅\nctx.fillStyle=\'rgb(255, 0, 0)\'\nctx.fillRect(0,0,flag_w,flag_h)\n# 再畫青天\nctx.fillStyle=\'rgb(0, 0, 150)\'\nctx.fillRect(0,0,flag_w/2,flag_h/2)\n# 畫十二道光芒白日\nctx.beginPath()\nstar_radius = flag_w/8\nangle = 0\nfor i in range(24):\n    angle += 5*math.pi*2/12\n    toX = circle_x + math.cos(angle)*star_radius\n    toY = circle_y + math.sin(angle)*star_radius\n    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo\n    if (i):\n        ctx.lineTo(toX, toY)\n    else:\n        ctx.moveTo(toX, toY)\nctx.closePath()\n# 將填色設為白色\nctx.fillStyle = \'#fff\'\nctx.fill()\n# 白日:藍圈\nctx.beginPath()\nctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)\nctx.closePath()\n# 填色設為藍色\nctx.fillStyle = \'rgb(0, 0, 149)\'\nctx.fill()\n# 白日:白心\nctx.beginPath()\nctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)\nctx.closePath()\n# 填色設為白色\nctx.fillStyle = \'#fff\'\nctx.fill()\n</script>\n \n \n', 'tags': '', 'url': '插入程式碼.html'}, {'title': '網際簡報', 'text': 'CMSimfly 中採用  Reveal.js  作為網際簡報, 其中的維護檔案位於 config/reveal.js, 而對應的簡報檔案則位於 reveal 目錄中. \n', 'tags': '', 'url': '網際簡報.html'}, {'title': '網誌編輯', 'text': 'CMSimfly 彩用  Pelican blog  系統, 編輯檔案位於 config/pelican.leo, 對應的 \n \xa0Markdown 原始檔案位於 markdown 目錄中, 而經 Pelican 轉換出的網誌超文件檔案則位於 blog 目錄中. \n 其餘在網誌文章中所需要的 Javascript 或 Brython 程式檔案, 則與 CMSimfly 及 Reveal.js 共用, 位於 static 目錄下. \n 上傳檔案與圖檔的引用則與 CMSimfly 架構相同. \n', 'tags': '', 'url': '網誌編輯.html'}, {'title': '已知錯誤', 'text': '全部頁面會因無法正確解讀而誤刪 \n 在特定情況下, 系統會誤刪 config/content.htm 檔案, 目前在單頁或全部頁面編輯存檔之前, 或將上一版本的 content.htm 存入 content_back.htm, 若 content.htm 內容被程式誤刪, 可以利用備份檔案複製回原始內容後, 再進行後續處理. \n 頁面標題不支援特殊符號 \n 各頁面標題目前不支援特殊符號, 例如: "/", "?" 等, 若已經發生程式無法解讀頁面的情況, 只能從編輯 config/content.htm 下手, 若系統位於遠端, 則後續必須要再設法提供一個額外的編輯 config/content.htm 檔案的網際連結功能. \n Video 引用不支援內部引用 \n tinymce 中插入 video 的小視窗, 要移除引用的圖像與連結, 因為一般建議不要在內容中存入 .mp4 的影片資料, 而只接受引入影片 URL 連結. \n \n 當ungit推送時出現錯誤內容 \n 可在隨身系統中的satrt.bat加入 set USERPROFILE=%Disk%:\\home \n 使得ungit能找到 y:\\home中的使用者目錄 \n \n', 'tags': '', 'url': '已知錯誤.html'}, {'title': '課程筆記', 'text': '\n', 'tags': '', 'url': '課程筆記.html'}, {'title': 'Git筆記重點整理', 'text': '線上觀看手冊 \n https://git-scm.com/book/zh-tw/v2 \n 開始 \n 版本控制系統 \n \n 利用RCS指令可控制任一版本資料，其 工作原理是在硬碟上保存一堆特殊格式的補丁集合，通過套用功能，便可以重新產生出每個版本的檔案內容。 \n Git控制方法分成 集中化與分散式版本控制系統 \n 集中化版本控制系統 \n \n 好處： \n 1.清楚了解分組內各成員所做進度 2.管理員統一控制所有開發者權限 3.各用戶端統一使用統一版本系統，好管理 壞處： 1.中央伺服器發生故障，各開發者便無法協同合作 2.統一集中資料會有遺失資料風險 \n 分散式版本控制系統 因集中化控制的不便，進而衍化出分散式控制系統 \n 優點： 1.任一協同伺服器故障，事後都能以任一用戶端鏡像還原 2.能與許多遠端倉儲互動，使不同地方群組能在不一樣的地方完成同一專案協同合作 3.階層式的分工合作 \n \n Git完整性 \n 1.Git 中所有的物件在儲存前都會被計算校驗碼（checksum）並以校驗碼參照物件。 2.計算較驗碼 機制稱為 SHA-1 雜湊演算法。 一個校驗碼是由 40 個 16 進位的字母（0–9 和 a–f）所組成，Git 會根據檔案的內容和資料夾的結構來計算。\xa0 3.\xa0Git 的資料庫內，每個檔案都是用其內容的校驗碼來儲存，而不是使用檔名。 \n Git狀態 \n 1.已提交（committed）： 檔案己安全地存在你的本地端資料庫。 \n 2. 已修改（modified）： 檔案已被修改但尚未提交到本地端資料庫。\xa0 \n 3. 已預存（staged）： 已預存代表這檔案將會被存到下次你提交的快照中。 \n \n Git工作流程 \n 1.你在你工作目錄修改檔案。 \n 2.預存檔案，將檔案的快照新增到預存區。 \n 3.做提交的動作，這會讓存在預存區的檔案快照永久地儲存在 Git 目錄中。 \n Git booK L9 \n 9.1 Git as a Client \n git svn： Git中所有Subversion橋接指令的基本指令都是 git svn 。 它需要相當多的指令，因此我們將在完成一些簡單的工作流程時展示最常見的指令。當用戶使用git svn時，需特別注意避免同時與Git遠端倉儲交互操作使用。 \n 10.1 Plumbing and Porcelain \n Plumbing and Porcelain \n \n 10.2 Git Objects \n Git Objects \n cat -file 從Git 取回資料 \n update - ref更新引用 \n 10.3 Git References \n Git References \n 如何知道最後一次提交？: \n 執行\xa0 git branch\xa0 \n $ cat .git/HEAD \n ref: refs/heads/master 執行 git checkout test \n $ cat .git/HEAD \n ref: refs/heads/test 也可以手動編輯此文件，但同樣可以執行更安全的命令: 執行symbolic-ref \n $ git symbolic-ref HEAD \n refs/heads/master 設置HEAD: \n $ git symbolic-ref HEAD \xa0 refs/heads/test \n $ cat .git/HEAD \n ref: refs/heads/test \n \n \n 10.4 Packfiles   10.5 The Refspec \n \n 10.4 Packfiles \n 使用 git cat-file 命令查看這個文件大小 \n 使用git gc打包文件 \n \n \n 10.5 The Refspec \n \n The Refspec \n .git / config文件中添加遠端origin的名稱，遠程存儲庫的URL以及用於獲取的refspec \n [remote "origin"]\n\turl = https://github.com/schacon/simplegit-progit\n\tfetch = +refs/heads/ :refs/remotes/origin/ 如果想一次性執行某些操作，也可以在命令行中指定refspec \n $ git fetch origin master:refs/remotes/origin/mymaster 指定多個refspec \n $ git fetch origin master:refs/remotes/origin/mymaster \\\n\t topic:refs/remotes/origin/topic\nFrom git@github.com:schacon/simplegit\n ! [rejected]        master     -> origin/mymaster  (non fast forward)\n * [new branch]      topic      -> origin/topic 刪除 refspec git push origin :topic git push origin -- delete topic \n 10.6 Transfer Protocols \n Transfer Protocols--傳輸協議 \n Git可以透過兩種主要方式在兩個倉儲之間傳輸數據：“啞吧”協議與“智能”協議。 本章重點著重於介紹這兩個主要協議的運作方式。 \n The Dumb Protocol--啞巴協議 \n 該協議稱為“啞巴協議”，是因為它在傳輸過程中不需要服務端的Git特定代碼;\xa0獲取過程是一系列HTTP\xa0 GET 請求，使用者可以自由的呈現Git倉儲的安排。 \n 10.7 Transfer Protocols \n 本章重點在介紹Git內部的維護和數據的恢復，有時Git會自動執行一個名為“auto\xa0 gc ”的指令，大多數情況下，此指令不執行任何操作，但如果有過多的packfiles，則Git會執行git gc的指令，此指令會刪除不必要的文件。 \n 不小心遺失提交則可使用git long和git master兩個指令來進行恢復。 \n 10.8 Environment Variables \n Git總是在 bash shell中運行，並使用許多shell環境變量來確定它的行為方式。 \n GIT_EXEC_PATH：可透過運行檢查當前設置 git --exec-path 。 \n HOME：它是Git查找全局配置文件的地方。 \n GIT_CONFIG_NOSYSTEM：如果您的系統配置干擾了您的指令，但是您無權更改或刪除它，這將非常有用。 \n GIT_COMMITTER_NAME \xa0設置提交者的名字 。 \n \n GIT_COMMITTER_EMAIL \xa0 是“提交者”字段的電子郵件地址。 \n \n \n GIT_COMMITTER_DATE \xa0 用於“提交者”字段中的日期。 \n 10.9 Summary \n Git為一個非常強大的系統工具，可以輕鬆使用它作為VCS。本章介紹了許多管道指令 - 這些指令使用戶在使用上更家簡單。 \n', 'tags': '', 'url': 'Git筆記重點整理.html'}, {'title': '課程內容', 'text': '', 'tags': '', 'url': '課程內容.html'}, {'title': '配置可攜程式環境-1', 'text': '\n', 'tags': '', 'url': '配置可攜程式環境-1.html'}, {'title': 'Git常用指令', 'text': '\n 1.Git \xa0clone\xa0\xa0\xa0 下載倉儲(已下載) \n 2.Git \xa0add .\xa0\xa0 新增檔案 \n 3.Git \xa0commit –m”\xa0\xa0\xa0 ”\xa0\xa0\xa0 提交更動名字 \n 4.Git   push 推送遠端 \n \n \n', 'tags': '', 'url': 'Git常用指令.html'}, {'title': 'ungit使用方法', 'text': '\n \xa0git add . 後使用 ungit \n \n 輸入這次提交的主題後按下commit \n \n 在按一次commit後的分支點擊push \n \n 再輸入使用者帳號密碼後推送完成 \n \n !!輸入完成後要直接按"Submit"扭，使用鍵盤的"Enter"無法完成!! \n \n \n 輸入完成後直接按下Submit即可 \n \n \n \n \n \n', 'tags': '', 'url': 'ungit使用方法.html'}, {'title': '期中影片', 'text': '40623153 \n \n \n 40623155 \n \n 40623157 \n \n type="text" \n 40623156 \n \n \n', 'tags': '', 'url': '期中影片.html'}, {'title': '個人操作影片', 'text': '', 'tags': '', 'url': '個人操作影片.html'}, {'title': '40623153', 'text': 'VirtualBox創建步驟 \n \n \n', 'tags': '', 'url': '40623153.html'}, {'title': '40623155', 'text': 'VirtualBox創建步驟 \n \n', 'tags': '', 'url': '40623155.html'}, {'title': '40623156', 'text': 'VirtualBox創建步驟 \n \n Virtualbox建立虛擬 Ub \n \n', 'tags': '', 'url': '40623156.html'}, {'title': '40623157', 'text': 'VirtualBox創建步驟 \n \n', 'tags': '', 'url': '40623157.html'}, {'title': 'Python 語法', 'text': 'Python 3 官方教材:\xa0 https://docs.python.org/3/index.html \xa0 \n Python tutorial:\xa0 https://docs.python.org/3/tutorial/index.html \xa0(英文) \n Python 教學:\xa0 https://python-doc-tw.github.io/tutorial/index.html \xa0 \n 網頁上的 Python - Brython:\xa0 https://www.brython.info/static_doc/en/intro.html \xa0 (解譯式) \n 網頁上的 Python GUI- Flexx:\xa0 https://flexx.readthedocs.io/en/stable/ \xa0(轉譯式) \n \n \n \n  for ggame  \n \n \n \n \n \n  Cango 程式庫  \n \n \n \n  for Konva 程式庫  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n 開始練習 print() 用法, 並著手建立函式 \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n Filename:  .py   \n Run   Output   清除輸出區 清除繪圖區 Reload \n \n \n \n  ****************************** keyword start  \n \n \n  ****************************** keyword end  \n  ***************************** slide ex1 start  \n \n \n \n  ***************************** slide ex1 end  \n  ***************************** slide ex2 start  \n \n \n \n  ***************************** slide ex2 end  \n  ***************************** slide ex3 start  \n \n \n \n  ***************************** slide ex3 end  \n  ***************************** slide ex4 start  \n \n \n \n  ***************************** slide ex4 end  \n  line drawing start  \n \n \n \n  line drawing ends  \n \n  flag ex start  \n \n \n \n  flag ex ends  \n \n  bunny start  \n \n \n \n  bunny ends  \n \n  clear canvas start  \n \n \n \n  clear canvas ends  \n \n  cango spur gears start  \n \n \n \n  cango spur gears ends  \n \n  temp convert start  \n \n \n \n  temp convert ends  \n \n  forloop start  \n \n \n \n  forloop ends  \n \n  guess start  \n \n \n \n  guess ends  \n \n  autoguess start  \n \n \n \n  autoguess ends  \n \n  lottery start  \n \n \n \n  lottery ends  \n \n  台灣威力彩 start  \n \n \n \n  台灣威力彩 ends  \n \n  bezier starts  \n \n \n \n  bezier ends  \n \n  turtle1 starts  \n \n \n \n  turtle1 ends  \n \n  turtle2 starts  \n \n \n \n  turtle2 ends  \n \n  turtle3 starts  \n \n \n \n  turtle3 ends  \n \n  turtle4 starts  \n \n \n \n  turtle4 ends  \n \n  turtle5 starts  \n \n \n \n  turtle5 ends  \n \n  turtle6 starts  \n \n \n \n  turtle6 ends  \n \n  turtle7 starts  \n \n \n \n  turtle7 ends  \n \n  turtle8 starts  \n \n \n \n  turtle8 ends  \n \n  konva1 starts  \n \n \n \n  konva1 ends  \n \n  ycqsort starts  \n \n \n \n  ycqsort ends  \n \n  ball starts  \n \n \n \n  ball ends  \n Keyword Ex1 Ex2 Ex3 Ex4 Ex5 Guess Autoguess 大樂透 威力彩 Temp Draw Flag Bezier Turtle1 Turtle2 Turtle3 Turtle4 Turtle5 Turtle6 Turtle7 Turtle8 Konva1 Bunny Ball Spur Ycqsort Clear \n 參考資料: \n turtle_intro.pdf \n turtle_intro2.pdf \n 其他擷取程式的方式:  http://mde.tw/2017springvcp/blog/web-based-python.html \xa0 \n', 'tags': '', 'url': 'Python 語法.html'}, {'title': 'Qt for Python', 'text': 'https://www.qt.io/qt-for-python \xa0 \n https://build-system.fman.io/python-qt-tutorial \xa0 \n https://build-system.fman.io/pyqt-exe-creation/ \xa0 \n https://github.com/mherrmann/fbs-tutorial \xa0 \n https://www.ics.com/blog/we-ported-qt-app-c-python-heres-what-happened \xa0 \n \n \n \n \n \n \n', 'tags': '', 'url': 'Qt for Python.html'}]};